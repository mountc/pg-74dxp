// Check GETTING_STARTED.markdown for information regarding usage.

import java.nio.file.*;

def envs = []

new File("configs").traverse( [maxDepth: 0, excludeNameFilter: /common/,
                               type: groovy.io.FileType.DIRECTORIES]){

    def bundleEnv = "${it.name}"

    envs << "distBuildZip${bundleEnv}"

    tasks.register( "distBuildZip${bundleEnv}" ){

        doLast{
            println "Running Zip for ${bundleEnv}"

            exec {
                workingDir '.'
                commandLine('blade', 'gw', 'distBundleZip', "-Pliferay.workspace.environment=${bundleEnv}")
            }

            println "Renaming bundle in ${buildDir.path}/${project.name}-${bundleEnv}.zip"
            Path source = Paths.get("${buildDir.path}/${project.name}.zip");

            try{
                Files.move(source, source.resolveSibling("${project.name}-${bundleEnv}.zip"),
                        StandardCopyOption.REPLACE_EXISTING);

            } catch (IOException e) {
                e.printStackTrace();
            }

        }

    }

}


tasks.register('distBundleZipAll') {
    description = 'Assembles and zips up a Liferay bundle for each of the defined config environments.'
    group = 'bundle'
    doLast {
        println 'Lets build some bundles'

    }
    dependsOn(envs)
}
